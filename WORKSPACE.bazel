workspace(name = "pucc")

###########
# General #
###########

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
load("@bazel_tools//tools/build_defs/repo:git.bzl", "git_repository")

###############
# Google Test #
###############

git_repository(
  name = "com_google_googletest",
  branch = "main",
  remote = "https://github.com/google/googletest/"
)

##########
# Skylib #
##########

http_archive(
    name = "bazel_skylib",
    sha256 = "b8a1527901774180afc798aeb28c4634bdccf19c4d98e7bdd1ce79d1fe9aaad7",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/bazel-skylib/releases/download/1.4.1/bazel-skylib-1.4.1.tar.gz",
        "https://github.com/bazelbuild/bazel-skylib/releases/download/1.4.1/bazel-skylib-1.4.1.tar.gz",
    ],
)

####################
# Google Benchmark #
####################

git_repository(
    name = "com_github_google_benchmark",
    branch = "main",
    remote = "https://github.com/google/benchmark"
)

##########
# Abseil #
##########

git_repository(
  name = "com_google_absl",
  branch = "master",
  remote = "https://github.com/abseil/abseil-cpp"
)

#########
# Boost #
#########

git_repository(
    name = "com_github_nelhage_rules_boost",
    branch = "master",
    # commit = "b5182725c821f3d1e15ada8e73bd3bb3e49feaa1",
    # shallow_since = "1678990750 +0000",
    remote = "https://github.com/nelhage/rules_boost",
)

load("@com_github_nelhage_rules_boost//:boost/boost.bzl", "boost_deps")
boost_deps()

#########
# Fruit #
#########

git_repository(
  name = "com_google_fruit",
  branch = "master",
  remote = "https://github.com/google/fruit",
#   commit = "570eb41e8ba7cb64837af57e5d50a94e45f02446",
#   shallow_since = "1675039404 -0800",
  strip_prefix = "extras/bazel_root"
)

###########
# CppLint #
###########

http_archive(
    name = "cpplint",
    build_file = "@//bin:cpplint.BUILD",
    sha256 = "b2979ff630299293f23c52096e408f2b359e2e26cb5cdf24aed4ce53e4293468",
    strip_prefix = "cpplint-1.2.2",
    url = "https://pypi.python.org/packages/source/c/cpplint/cpplint-1.2.2.tar.gz",
)

#############
# Verilator #
#############

git_repository(
    name = "rules_verilator",
    branch = "master",
    remote = "https://github.com/kkiningh/rules_verilator"
)

load(
    "@rules_verilator//verilator:repositories.bzl",
    "rules_verilator_dependencies",
    "rules_verilator_toolchains",
)

rules_verilator_dependencies()
rules_verilator_toolchains()

# Register toolchain dependencies
load("@rules_m4//m4:m4.bzl", "m4_register_toolchains")
m4_register_toolchains()

load("@rules_flex//flex:flex.bzl", "flex_register_toolchains")
flex_register_toolchains()

load("@rules_bison//bison:bison.bzl", "bison_register_toolchains")
bison_register_toolchains()

#########
# OBazl #
#########

load("//:WORKSPACE.bzl", "fetch_repos")
fetch_repos()

load("@bazel_skylib//:workspace.bzl", "bazel_skylib_workspace")
bazel_skylib_workspace()

load("@rules_ocaml//:WORKSPACE.bzl", ocaml_fetch_repos = "fetch_repos")
ocaml_fetch_repos()

load("@opam//:WORKSPACE.bzl", opam_fetch_repos = "fetch_repos")
opam_fetch_repos()

load("@obazl//:WORKSPACE.bzl", obazl_fetch_repos = "fetch_repos")
obazl_fetch_repos()

load("@rules_foreign_cc//foreign_cc:repositories.bzl",
     "rules_foreign_cc_dependencies")
rules_foreign_cc_dependencies()

################ rules_jsoo etc. ################
## NB: for now we need the jsoo stuff because @obazl//coswitch writes
## jsoo targets into the opam pkgs - some pkgs include a jsoo runtime.
load("@rules_jsoo//:WORKSPACE.bzl", jsoo_fetch_repos = "fetch_repos")
jsoo_fetch_repos()

load("@aspect_rules_js//js:repositories.bzl", "rules_js_dependencies")
rules_js_dependencies()

load("@rules_nodejs//nodejs:repositories.bzl",
     "DEFAULT_NODE_VERSION",
     "nodejs_register_toolchains")

nodejs_register_toolchains(
    name = "nodejs",
    node_version = DEFAULT_NODE_VERSION,
)

# load("@aspect_rules_js//npm:npm_import.bzl", "npm_translate_lock")
# npm_translate_lock(
#     name = "npm",
#     bins = {
#         # derived from "bin" attribute in node_modules/typescript/package.json
#         "typescript": {
#             "tsc": "./bin/tsc",
#             "tsserver": "./bin/tsserver",
#         },
#     },
#     pnpm_lock = "//:pnpm-lock.yaml",
#     verify_node_modules_ignored = "//:.bazelignore",
# )
# load("@npm//:repositories.bzl", "npm_repositories")
# npm_repositories()

## end of jsoo deps

load(":WORKSPACE.opam.bzl", "bootstrap")
bootstrap()
