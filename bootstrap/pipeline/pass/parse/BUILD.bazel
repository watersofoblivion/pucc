load("@rules_ocaml//build:rules.bzl", "ocamllex", "ocaml_module", "ocaml_test")
load("@obazl//build:rules_ocaml.bzl", "menhir")

# Environment

ocaml_module(
    name = "parseEnv",
    struct = "parseEnv.ml",
    deps = [
        "//bootstrap/core:core",
    ],
    visibility = ["//visibility:private"],
)

ocaml_module(
    name = "parseToken",
    struct = "parseToken.ml",
    deps = [
        "//bootstrap/core:core",
        ":parseEnv",
    ],
    visibility = ["//visibility:private"],
)

ocaml_module(
    name = "parseAction",
    struct = "parseAction.ml",
    deps = [
        "//bootstrap/core:core",
        "//bootstrap/pipeline/lang/syntax:syntax",
        ":parseEnv",
        ":parseToken",
    ],
    visibility = ["//visibility:private"],
)

# Parser

menhir(
    name = "genparser",
    tool = "@ocaml//bin:menhir",
    base = "parser",
    grammars = [
        "core.mly",
        "tokens.mly",
        "name.mly",
        "ty.mly",
        "op.mly",
        "patt.mly",
        "expr.mly",
        "pkg.mly",
        "import.mly",
        "top.mly",
        "file.mly",
    ],
    token = ":parseToken",
    deps = [
        "//bootstrap/toolchain/workspace:workspace",
        "//bootstrap/core:core",
        "//bootstrap/pipeline/lang/syntax:syntax",
        ":parseEnv",
        ":parseToken",
        ":parseAction",
    ],
    outs = [
        "parser.mli",
        "parser.ml",
    ],
    explain = True,
    flags = [
            "--strict",
            "--no-dollars",
    ],
)

ocaml_module(
    name = "parser",
    sig = "parser.mli",
    struct = "parser.ml",
    deps = [
        "@menhirLib//lib/menhirLib",
        "//bootstrap/toolchain/workspace:workspace",
        "//bootstrap/core:core",
        "//bootstrap/pipeline/lang/syntax:syntax",
        ":parseEnv",
        ":parseToken",
        ":parseAction",
    ],
    visibility = ["//visibility:private"],
)

# Lexer

ocamllex(
    name = "genlex",
    src = "lexer.mll",
    out = "lexer.ml",
    visibility = ["//visibility:private"],
)

ocaml_module(
    name = "lexer",
    struct = "lexer.ml",
    deps = [
        ":parseEnv",
        ":parseToken",
        ":parseAction",
        ":parser",
    ],
    visibility = ["//visibility:private"],
)

# Module

ocaml_module(
    name = "parseEntry",
    struct = "parseEntry.ml",
    deps = [
        "@menhirLib//lib/menhirLib",
        "//bootstrap/toolchain/workspace:workspace",
        "//bootstrap/core:core",
        "//bootstrap/pipeline/lang/syntax:syntax",
        ":parseEnv",
        ":parseToken",
        ":parseAction",
        ":lexer",
        ":parser",
    ],
    visibility = ["//visibility:private"],
)

ocaml_module(
    name = "parse",
    sig = "parse.mli",
    struct = "parse.ml",
    deps = [
        "@menhirLib//lib/menhirLib",
        "//bootstrap/toolchain/workspace:workspace",
        "//bootstrap/core:core",
        "//bootstrap/pipeline/lang/syntax:syntax",
        ":parseEnv",
        ":parseToken",
        ":parseAction",
        ":lexer",
        ":parser",
        ":parseEntry",
    ],
    visibility = ["//bootstrap:__subpackages__"],
)

# Tests

ocaml_module(
    name = "parseEnvTest",
    struct = "parseEnvTest.ml",
    deps = [
        "@menhirLib//lib/menhirLib",
        "//bootstrap/core:core",
        ":parseEnv",
        "@ounit2//lib/ounit2",
        "//bootstrap/core:coreTest",
    ],
    visibility = ["//visibility:private"],
)

ocaml_module(
    name = "parseTokenTest",
    struct = "parseTokenTest.ml",
    deps = [
        "@menhirLib//lib/menhirLib",
        "//bootstrap/core:core",
        ":parseEnv",
        ":parseToken",
        "@ounit2//lib/ounit2",
        "//bootstrap/core:coreTest",
        ":parseEnvTest",
    ],
    visibility = ["//visibility:private"],
)

ocaml_module(
    name = "parseActionTest",
    struct = "parseActionTest.ml",
    deps = [
        "@menhirLib//lib/menhirLib",
        "//bootstrap/core:core",
        "//bootstrap/pipeline/lang/syntax:syntax",
        ":parseEnv",
        ":parseToken",
        ":parseAction",
        "@ounit2//lib/ounit2",
        "//bootstrap/core:coreTest",
        "//bootstrap/pipeline/lang/syntax:syntaxTest",
        ":parseEnvTest",
        ":parseTokenTest",
    ],
    visibility = ["//visibility:private"],
)

ocaml_module(
    name = "parserTest",
    struct = "parserTest.ml",
    deps = [
        "@menhirLib//lib/menhirLib",
        "//bootstrap/core:core",
        "//bootstrap/pipeline/lang/syntax:syntax",
        ":parseEnv",
        ":parseToken",
        ":parseAction",
        ":parser",
        "@ounit2//lib/ounit2",
        "//bootstrap/core:coreTest",
        "//bootstrap/pipeline/lang/syntax:syntaxTest",
        ":parseEnvTest",
        ":parseTokenTest",
        ":parseActionTest",
    ],
    visibility = ["//visibility:private"],
)

ocaml_module(
    name = "lexerTest",
    struct = "lexerTest.ml",
    deps = [
        "@menhirLib//lib/menhirLib",
        "//bootstrap/core:core",
        "//bootstrap/pipeline/lang/syntax:syntax",
        ":parseEnv",
        ":parseToken",
        ":parseAction",
        ":parser",
        "@ounit2//lib/ounit2",
        "//bootstrap/core:coreTest",
        "//bootstrap/pipeline/lang/syntax:syntaxTest",
        ":parseEnvTest",
        ":parseTokenTest",
        ":parseActionTest",
        ":parserTest",
    ],
    visibility = ["//visibility:private"],
)

ocaml_module(
    name = "parseTest",
    sig = "parseTest.mli",
    struct = "parseTest.ml",
    deps = [
        "@menhirLib//lib/menhirLib",
        "//bootstrap/core:core",
        "//bootstrap/pipeline/lang/syntax:syntax",
        ":parseEnv",
        ":parseToken",
        ":parseAction",
        ":parser",
        ":lexer",
        "@ounit2//lib/ounit2",
        "//bootstrap/core:coreTest",
        "//bootstrap/pipeline/lang/syntax:syntaxTest",
        ":parseEnvTest",
        ":parseTokenTest",
        ":parseActionTest",
        ":parserTest",
        ":lexerTest",
    ],
    visibility = ["//bootstrap:__subpackages__"],
)

# Suite

ocaml_module(
    name = "parseEnvSuite",
    struct = "parseEnvSuite.ml",
    deps = [
        "@menhirLib//lib/menhirLib",
        "//bootstrap/core:core",
        "//bootstrap/pipeline/lang/syntax:syntax",
        ":parse",
        "@ounit2//lib/ounit2",
        "//bootstrap/core:coreTest",
        "//bootstrap/pipeline/lang/syntax:syntaxTest",
        ":parseTest",
    ],
    visibility = ["//visibility:private"],
)

ocaml_module(
    name = "parseTokenSuite",
    struct = "parseTokenSuite.ml",
    deps = [
        "@menhirLib//lib/menhirLib",
        "//bootstrap/core:core",
        "//bootstrap/pipeline/lang/syntax:syntax",
        ":parse",
        "@ounit2//lib/ounit2",
        "//bootstrap/core:coreTest",
        "//bootstrap/pipeline/lang/syntax:syntaxTest",
        ":parseTest",
    ],
    visibility = ["//visibility:private"],
)

ocaml_module(
    name = "parseActionSuite",
    struct = "parseActionSuite.ml",
    deps = [
        "@menhirLib//lib/menhirLib",
        "//bootstrap/core:core",
        "//bootstrap/pipeline/lang/syntax:syntax",
        ":parse",
        "@ounit2//lib/ounit2",
        "//bootstrap/core:coreTest",
        "//bootstrap/pipeline/lang/syntax:syntaxTest",
        ":parseTest",
    ],
    visibility = ["//visibility:private"],
)

ocaml_module(
    name = "parserSuite",
    struct = "parserSuite.ml",
    deps = [
        "@menhirLib//lib/menhirLib",
        "//bootstrap/core:core",
        "//bootstrap/pipeline/lang/syntax:syntax",
        ":parse",
        "@ounit2//lib/ounit2",
        "//bootstrap/core:coreTest",
        "//bootstrap/pipeline/lang/syntax:syntaxTest",
        ":parseTest",
    ],
    visibility = ["//visibility:private"],
)

ocaml_module(
    name = "lexerSuite",
    struct = "lexerSuite.ml",
    deps = [
        "@menhirLib//lib/menhirLib",
        "//bootstrap/core:core",
        "//bootstrap/pipeline/lang/syntax:syntax",
        ":parse",
        "@ounit2//lib/ounit2",
        "//bootstrap/core:coreTest",
        "//bootstrap/pipeline/lang/syntax:syntaxTest",
        ":parseTest",
    ],
    visibility = ["//visibility:private"],
)

ocaml_module(
    name = "parseSuite",
    struct = "parseSuite.ml",
    deps = [
        "@menhirLib//lib/menhirLib",
        "//bootstrap/core:core",
        "//bootstrap/pipeline/lang/syntax:syntax",
        ":parse",
        "@ounit2//lib/ounit2",
        "//bootstrap/core:coreTest",
        "//bootstrap/pipeline/lang/syntax:syntaxTest",
        ":parseTest",
        ":parseEnvSuite",
        ":parseTokenSuite",
        ":parseActionSuite",
        ":parserSuite",
        ":lexerSuite",
    ],
    visibility = ["//visibility:private"],
)

ocaml_test(
    name = "parse-test",
    main = ":parseSuite",
)